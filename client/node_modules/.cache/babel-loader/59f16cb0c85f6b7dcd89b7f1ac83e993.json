{"ast":null,"code":"import axios from \"axios\"; // create new instance\n\nconst Http = axios.create(); // set default config\n\nHttp.defaults.baseURL = process.env.REACT_APP_BACKEND_API_URL;\nHttp.defaults.headers.common.Accept = \"*/*\";\nHttp.defaults.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n/**\r\n * intercept the response so we can handle the\r\n * expected exceptions from the API\r\n */\n\nHttp.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  /**\r\n   * This could be a CORS issue or\r\n   * a dropped internet connection.\r\n   */\n  if (typeof error.response === \"undefined\") {\n    return alert(\"A network error occurred.\");\n  }\n\n  switch (error.response.status) {\n    case 400:\n      console.error(error.response.data.message);\n      break;\n\n    case 401:\n      break;\n\n    case 422:\n      /**\r\n       * Handle Validation Response\r\n       */\n      console.error(\"Please enter required items.\");\n      break;\n\n    case 403:\n    case 500:\n    case 562:\n    case 563:\n    case 567:\n    case 568:\n    case 570:\n      /**\r\n       * Handle the exceptions when the server\r\n       * responsds with error messages\r\n       */\n      if (error.response.data instanceof Blob) {\n        console.error(\"The file does not exist.\");\n      } else {\n        let message = error.response.data.message || error.response.data;\n\n        if (!(message instanceof String)) {\n          message = error.response.statusText;\n        }\n\n        console.error(message);\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error);\n});\nexport default Http;","map":{"version":3,"sources":["C:/Users/nessia.brb/development/React-JS/the-project-one/src/utils/Http.js"],"names":["axios","Http","create","defaults","baseURL","process","env","REACT_APP_BACKEND_API_URL","headers","common","Accept","interceptors","response","use","error","alert","status","console","data","message","Blob","String","statusText","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,EAAb,C,CAEA;;AACAD,IAAI,CAACE,QAAL,CAAcC,OAAd,GAAwBC,OAAO,CAACC,GAAR,CAAYC,yBAApC;AACAN,IAAI,CAACE,QAAL,CAAcK,OAAd,CAAsBC,MAAtB,CAA6BC,MAA7B,GAAsC,KAAtC;AACAT,IAAI,CAACE,QAAL,CAAcK,OAAd,CAAsB,cAAtB,IAAwC,mCAAxC;AAEA;;;;;AAIAP,IAAI,CAACU,YAAL,CAAkBC,QAAlB,CAA2BC,GAA3B,CACE,UAASD,QAAT,EAAmB;AACjB,SAAOA,QAAP;AACD,CAHH,EAIE,UAASE,KAAT,EAAgB;AACd;;;;AAIA,MAAI,OAAOA,KAAK,CAACF,QAAb,KAA0B,WAA9B,EAA2C;AACzC,WAAOG,KAAK,CAAC,2BAAD,CAAZ;AACD;;AAED,UAAQD,KAAK,CAACF,QAAN,CAAeI,MAAvB;AACE,SAAK,GAAL;AACEC,MAAAA,OAAO,CAACH,KAAR,CAAcA,KAAK,CAACF,QAAN,CAAeM,IAAf,CAAoBC,OAAlC;AACA;;AACF,SAAK,GAAL;AACE;;AACF,SAAK,GAAL;AACE;;;AAGAF,MAAAA,OAAO,CAACH,KAAR,CAAc,8BAAd;AACA;;AACF,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACE;;;;AAKA,UAAIA,KAAK,CAACF,QAAN,CAAeM,IAAf,YAA+BE,IAAnC,EAAyC;AACvCH,QAAAA,OAAO,CAACH,KAAR,CAAc,0BAAd;AACD,OAFD,MAEO;AACL,YAAIK,OAAO,GAAGL,KAAK,CAACF,QAAN,CAAeM,IAAf,CAAoBC,OAApB,IAA+BL,KAAK,CAACF,QAAN,CAAeM,IAA5D;;AACA,YAAI,EAAEC,OAAO,YAAYE,MAArB,CAAJ,EAAkC;AAChCF,UAAAA,OAAO,GAAGL,KAAK,CAACF,QAAN,CAAeU,UAAzB;AACD;;AACDL,QAAAA,OAAO,CAACH,KAAR,CAAcK,OAAd;AACD;;AAED;;AACF;AACE;AApCJ;;AAuCA,SAAOI,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACD,CArDH;AAwDA,eAAeb,IAAf","sourcesContent":["import axios from \"axios\";\r\n\r\n// create new instance\r\nconst Http = axios.create();\r\n\r\n// set default config\r\nHttp.defaults.baseURL = process.env.REACT_APP_BACKEND_API_URL;\r\nHttp.defaults.headers.common.Accept = \"*/*\";\r\nHttp.defaults.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\r\n\r\n/**\r\n * intercept the response so we can handle the\r\n * expected exceptions from the API\r\n */\r\nHttp.interceptors.response.use(\r\n  function(response) {\r\n    return response;\r\n  },\r\n  function(error) {\r\n    /**\r\n     * This could be a CORS issue or\r\n     * a dropped internet connection.\r\n     */\r\n    if (typeof error.response === \"undefined\") {\r\n      return alert(\"A network error occurred.\");\r\n    }\r\n\r\n    switch (error.response.status) {\r\n      case 400:\r\n        console.error(error.response.data.message);\r\n        break;\r\n      case 401:\r\n        break;\r\n      case 422:\r\n        /**\r\n         * Handle Validation Response\r\n         */\r\n        console.error(\"Please enter required items.\");\r\n        break;\r\n      case 403:\r\n      case 500:\r\n      case 562:\r\n      case 563:\r\n      case 567:\r\n      case 568:\r\n      case 570:\r\n        /**\r\n         * Handle the exceptions when the server\r\n         * responsds with error messages\r\n         */\r\n\r\n        if (error.response.data instanceof Blob) {\r\n          console.error(\"The file does not exist.\");\r\n        } else {\r\n          let message = error.response.data.message || error.response.data;\r\n          if (!(message instanceof String)) {\r\n            message = error.response.statusText;\r\n          }\r\n          console.error(message);\r\n        }\r\n\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default Http;\r\n"]},"metadata":{},"sourceType":"module"}